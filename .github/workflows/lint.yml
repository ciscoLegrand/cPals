name: 🚀 Ruby Lint, Autocorrect & Test

on: [push, pull_request]

permissions:
  contents: write

jobs:
  rubocop:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:12
        env:
          POSTGRES_DB: my_test_db
          POSTGRES_USER: user
          POSTGRES_PASSWORD: password
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    steps:
      - name: 🔄 Checking out the code
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: 💎 Setting up Ruby environment
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: '3.2.2'

      # Cache Bundler dependencies
      - name: 🗃️ Cache Bundler dependencies
        uses: actions/cache@v2
        with:
          path: vendor/bundle
          key: ${{ runner.os }}-gems-${{ hashFiles('**/Gemfile.lock') }}
          restore-keys: |
            ${{ runner.os }}-gems-

      - name: 💻 Installing Bundler and dependencies
        run: |
          gem install bundler
          bundle config set --local path 'vendor/bundle'
          bundle install

      - name: ⚠️ Running Rubocop to check for offenses
        run: |
          bundle exec rubocop --parallel --format simple || echo "RUBOCOP_STATUS=1" >> $GITHUB_ENV

      - name: 🤖 Auto-correcting Rubocop offenses
        if: ${{ env.RUBOCOP_STATUS }} == 1
        run: |
          bundle exec rubocop -A
          git add .
          git commit -m "[BOT] 🤖 Autocorrect Rubocop offenses" || echo "CHANGES_MADE=true" >> $GITHUB_ENV

      - name: ⚠️ Re-checking Rubocop offenses
        if: ${{ env.CHANGES_MADE }} == 'true'
        run: |
          bundle exec rubocop --parallel --format simple

      - name: 🔼 Pushing changes to the branch
        if: ${{ env.CHANGES_MADE }} == 'true'
        uses: ad-m/github-push-action@master
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          branch: ${{ github.head_ref }}

      - name: 🐘 Setting up PostgreSQL
        env:
          PGHOST: localhost
          PGUSER: user
          PGPASSWORD: password
        run: |
          sudo apt-get update
          sudo apt-get install libpq-dev
          gem install pg
          psql -c 'create database my_test_db;' -U postgres

      - name: 🚀 Preparing database
        env:
          RAILS_ENV: test
          DATABASE_URL: postgres://user:password@localhost:5432/my_test_db
        run: |
          bundle exec rails db:create db:schema:load

      - name: 🧪 Running RSpec tests
        run: |
          bundle exec rspec
