name: 🚀 Ruby CI/CD Pipeline

on: [push, pull_request]

permissions:
  contents: write

jobs:
  rubocop:
    runs-on: ubuntu-latest
    steps:
      - name: 🔄 Checking out the code
        uses: actions/checkout@v2

      - name: 💎 Setting up Ruby environment
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: '3.2.2' # Asegúrate de usar la versión de Ruby correcta

      - name: 🗃️ Cache Bundler dependencies
        uses: actions/cache@v2
        with:
          path: vendor/bundle
          key: ${{ runner.os }}-gems-${{ hashFiles('**/Gemfile.lock') }}
          restore-keys: |
            ${{ runner.os }}-gems-

      - name: 💻 Installing Bundler and dependencies
        run: |
          gem install bundler -N
          bundle config set --local path 'vendor/bundle'
          bundle install --jobs 4 --retry 3

      - name: ⚠️ Running Rubocop to check for offenses
        run: bundle exec rubocop --parallel --format simple || echo "RUBOCOP_STATUS=1" >> $GITHUB_ENV

      - name: 🤖 Auto-correcting Rubocop offenses
        if: ${{ env.RUBOCOP_STATUS }} == 1
        run: |
          bundle exec rubocop -A
          git add .
          git commit -m "[BOT] 🤖 Autocorrect Rubocop offenses" || echo "CHANGES_MADE=true" >> $GITHUB_ENV

      - name: ⚠️ Re-checking Rubocop offenses
        if: ${{ env.CHANGES_MADE }} == 'true'
        run: bundle exec rubocop --parallel --format simple

      - name: 🔼 Pushing changes to the branch
        if: ${{ env.CHANGES_MADE }} == 'true'
        uses: ad-m/github-push-action@master
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          branch: ${{ github.head_ref }}

  test:
    runs-on: ubuntu-latest
    steps:
      - name: 🔄 Checking out the code
        uses: actions/checkout@v2

      - name: 💎 Setting up Ruby environment
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: '3.2.2' # Asegúrate de usar la misma versión de Ruby

      - name: 🗃️ Cache Bundler dependencies
        uses: actions/cache@v2
        with:
          path: vendor/bundle
          key: ${{ runner.os }}-gems-${{ hashFiles('**/Gemfile.lock') }}
          restore-keys: |
            ${{ runner.os }}-gems-

      - name: 💻 Installing Bundler and dependencies
        run: |
          gem install bundler -N
          bundle config set --local path 'vendor/bundle'
          bundle install --jobs 4 --retry 3

      - name: 🧪 Run Tests
        run: bundle exec rspec
